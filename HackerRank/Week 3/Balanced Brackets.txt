Balanced Brackets

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 1000  
typedef struct {
    char arr[MAX];
    int top;
} Stack;

void push(Stack* s, char c) {
    s->arr[++(s->top)] = c;
}

char pop(Stack* s) {
    return s->arr[(s->top)--];
}

char peek(Stack* s) {
    return s->arr[s->top];
}

int isEmpty(Stack* s) {
    return s->top == -1;
}

int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '[' && close == ']') ||
           (open == '{' && close == '}');
}
char* isBalanced(char* s) {
    Stack st;
    st.top = -1;

    for (int i = 0; s[i] != '\0'; i++) {
        char c = s[i];

        if (c == '(' || c == '[' || c == '{') {
            push(&st, c);
        } else {
            if (isEmpty(&st)) return "NO";  
            char top = pop(&st);
            if (!isMatchingPair(top, c)) return "NO"; 
        }
    }

    return isEmpty(&st) ? "YES" : "NO";
}

int main() {
    int n;
    scanf("%d", &n);
    char s[MAX];
    for (int i = 0; i < n; i++) {
        scanf("%s", s);
        printf("%s\n", isBalanced(s));
    }
    return 0;
}