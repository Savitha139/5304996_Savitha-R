Reverse a doubly linked list

#include <stdio.h>
#include <stdlib.h>

typedef struct DoublyLinkedListNode {
    int data;
    struct DoublyLinkedListNode* next;
    struct DoublyLinkedListNode* prev;
} DoublyLinkedListNode;

DoublyLinkedListNode* createNode(int data) {
    DoublyLinkedListNode* node = (DoublyLinkedListNode*)malloc(sizeof(DoublyLinkedListNode));
    node->data = data;
    node->next = NULL;
    node->prev = NULL;
    return node;
}

DoublyLinkedListNode* reverse(DoublyLinkedListNode* llist) {
    if (llist == NULL) return NULL;
    DoublyLinkedListNode* c = llist;
    DoublyLinkedListNode* t = NULL;
    while (c != NULL) {
        t = c->prev;
        c->prev = c->next;
        c->next = t;
        llist = c;          
        c = c->prev;     
    }
    return llist;
}

void printList(DoublyLinkedListNode* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

int main() {
    int t;
    scanf("%d", &t);
    while (t--) {
        int n;
        scanf("%d", &n);
        DoublyLinkedListNode* head = NULL;
        DoublyLinkedListNode* tail = NULL;

        for (int i = 0; i < n; i++) {
            int val;
            scanf("%d", &val);
            DoublyLinkedListNode* node = createNode(val);
            if (head == NULL) {
                head = tail = node;
            } else {
                tail->next = node;
                node->prev = tail;
                tail = node;
            }
        }

        head = reverse(head);
        printList(head);
    }
    return 0;
}